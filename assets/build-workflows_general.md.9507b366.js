import{_ as s,o as a,c as n,V as l}from"./chunks/framework.2af28b0a.js";const A=JSON.parse('{"title":"General Approach","description":"","frontmatter":{},"headers":[],"relativePath":"build-workflows/general.md","filePath":"build-workflows/general.md"}'),o={name:"build-workflows/general.md"},e=l(`<h1 id="general-approach" tabindex="-1">General Approach <a class="header-anchor" href="#general-approach" aria-label="Permalink to &quot;General Approach&quot;">​</a></h1><p>To build final libraries that are usable by developers on different platforms, you roughly need to do the following:</p><ol><li>Build the native binaries for each platform you want to support.</li><li>Build the binding code.</li><li>Bundle these two artifacts together and make sure the binding code can find the native libraries.</li></ol><p>This can be done more or less &quot;manually&quot; using shell scripts. Here is an example of how you&#39;d do it in Python:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">#!/usr/bin/env bash</span></span>
<span class="line"><span style="color:#A6ACCD;">OS</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">uname</span><span style="color:#C3E88D;"> -s</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Step 1: Generating native binaries</span></span>
<span class="line"><span style="color:#FFCB6B;">cargo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> $OS </span><span style="color:#89DDFF;font-style:italic;">in</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Darwin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Copying macOS libcalendarffi.dylib...</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">cp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./target/release/libcalendarffi.dylib</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">../calendar-python/src/calendar/libcalendarffi.dylib</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">;;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Linux</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Copying linux libcalendarffi.so...</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">cp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./target/release/libcalendarffi.so</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">../calendar-python/src/calendar/libcalendarffi.so</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">;;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">esac</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Step 2: Generating bdk.py</span></span>
<span class="line"><span style="color:#FFCB6B;">cargo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--bin</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">uniffi-bindgen</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">generate</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--library</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./target/aarch64-apple-darwin/release/libcalendarffi.dylib</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--language</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">python</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--out-dir</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">../calendar-python/src/calendar/</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--no-format</span></span></code></pre></div><p>Once those two steps are completed, you&#39;d build and publish the library using the standard Python tooling:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">python3</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">setup.py</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bdist_wheel</span></span>
<span class="line"><span style="color:#FFCB6B;">python3</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">twine</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">upload</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dist/</span><span style="color:#A6ACCD;">*</span></span></code></pre></div><h2 id="leveraging-this-workflow-for-different-build-tools-and-languages" tabindex="-1">Leveraging this workflow for different build tools and languages <a class="header-anchor" href="#leveraging-this-workflow-for-different-build-tools-and-languages" aria-label="Permalink to &quot;Leveraging this workflow for different build tools and languages&quot;">​</a></h2><p>This approach is how you go about building and publishing the libraries for the different languages you wish to support. The only difference is that you&#39;ll need to use the appropriate tooling for each language. Note that in some cases, it can be more idiomatic to use extensions on build tools than shell scripts.</p>`,9),p=[e];function t(r,c,i,y,C,D){return a(),n("div",null,p)}const h=s(o,[["render",t]]);export{A as __pageData,h as default};
