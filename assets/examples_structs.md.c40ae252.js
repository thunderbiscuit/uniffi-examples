import{_ as s,o as a,c as n,V as e}from"./chunks/framework.2af28b0a.js";const D=JSON.parse('{"title":"Structs","description":"","frontmatter":{},"headers":[],"relativePath":"examples/structs.md","filePath":"examples/structs.md"}'),l={name:"examples/structs.md"},o=e(`<h1 id="structs" tabindex="-1">Structs <a class="header-anchor" href="#structs" aria-label="Permalink to &quot;Structs&quot;">​</a></h1><p>Uniffi can expose Rust structs and their associated fields.</p><p>Suppose a Rust struct is defined as such:</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CalendarOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    year</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">u32</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    private</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bool</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>We expose it in the UDL language using the <code>dictionnary</code> keyword like so:</p><div class="language-uniffi-udl"><button title="Copy Code" class="copy"></button><span class="lang">uniffi-udl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">namespace calendar {};</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">dictionary CalendarOptions {</span></span>
<span class="line"><span style="color:#A6ACCD;">  string name;</span></span>
<span class="line"><span style="color:#A6ACCD;">  u32 year;</span></span>
<span class="line"><span style="color:#A6ACCD;">  boolean private;</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span></code></pre></div><p>And the resulting Kotlin class would look like this:</p><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">data</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CalendarOptions</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> name: </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">, </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> year: </span><span style="color:#FFCB6B;">UInt</span><span style="color:#A6ACCD;">, </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">Boolean</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span></code></pre></div><h2 id="fields-with-object-references" tabindex="-1">Fields with object references <a class="header-anchor" href="#fields-with-object-references" aria-label="Permalink to &quot;Fields with object references&quot;">​</a></h2><p>If a dictionary contains a field whose type is an interface, then that field will hold a reference to an underlying instance of a Rust struct. The Rust code for working with such fields must store them as an <code>Arc</code> in order to help properly manage the lifetime of the instance. So if the UDL interface looked like this:</p><div class="language-uniffi-udl"><button title="Copy Code" class="copy"></button><span class="lang">uniffi-udl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">interface User {</span></span>
<span class="line"><span style="color:#A6ACCD;">  // Some sort of &quot;user&quot; object that can own todo items</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">dictionary TodoEntry {</span></span>
<span class="line"><span style="color:#A6ACCD;">    User owner;</span></span>
<span class="line"><span style="color:#A6ACCD;">    string text;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>Then the corresponding Rust code would need to look like this:</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TodoEntry</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    owner</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Arc</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">User</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    text</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,13),p=[o];function t(c,r,i,C,y,A){return a(),n("div",null,p)}const u=s(l,[["render",t]]);export{D as __pageData,u as default};
