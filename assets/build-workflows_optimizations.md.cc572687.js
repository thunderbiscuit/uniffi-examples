import{_ as s,o as a,c as n,V as o}from"./chunks/framework.2af28b0a.js";const d=JSON.parse('{"title":"Optimizations","description":"","frontmatter":{},"headers":[],"relativePath":"build-workflows/optimizations.md","filePath":"build-workflows/optimizations.md"}'),l={name:"build-workflows/optimizations.md"},e=o(`<h1 id="optimizations" tabindex="-1">Optimizations <a class="header-anchor" href="#optimizations" aria-label="Permalink to &quot;Optimizations&quot;">â€‹</a></h1><p>When compiling Rust binaries, a range of options can be used to reduce the size of the final binary that must be shipped with the library. Here is an example of a <code>Cargo.toml</code> file that uses these options, which are used in bdk-ffi. These options are then used when calling <code>cargo build --profile release-smaller</code> to build the final binary.</p><div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">profile</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">release-smaller</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">inherits </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">release</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">opt-level </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">z</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;font-style:italic;"># Optimize for size.</span></span>
<span class="line"><span style="color:#A6ACCD;">lto </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">          </span><span style="color:#676E95;font-style:italic;"># Enable Link Time Optimization</span></span>
<span class="line"><span style="color:#A6ACCD;">codegen-units </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;"># Reduce number of codegen units to increase optimizations.</span></span>
<span class="line"><span style="color:#A6ACCD;">panic </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">abort</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;font-style:italic;"># Abort on panic</span></span>
<span class="line"><span style="color:#A6ACCD;">strip </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">debuginfo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># Strip symbols from binary*</span></span></code></pre></div>`,3),t=[e];function p(i,r,c,y,D,C){return a(),n("div",null,t)}const F=s(l,[["render",p]]);export{d as __pageData,F as default};
