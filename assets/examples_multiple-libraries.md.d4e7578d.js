import{_ as e,o as s,c as a,V as l}from"./chunks/framework.2af28b0a.js";const h=JSON.parse('{"title":"Multiple Libraries","description":"","frontmatter":{},"headers":[],"relativePath":"examples/multiple-libraries.md","filePath":"examples/multiple-libraries.md"}'),t={name:"examples/multiple-libraries.md"},n=l(`<h1 id="multiple-libraries" tabindex="-1">Multiple Libraries <a class="header-anchor" href="#multiple-libraries" aria-label="Permalink to &quot;Multiple Libraries&quot;">â€‹</a></h1><p>The <a href="https://github.com/thunderbiscuit/uniffi-examples/tree/master/6-multiple-libraries" target="_blank" rel="noreferrer">multiple libraries</a> directory adds a new directory; <code>clock-ffi</code>, which contains an enum type our <code>calendar-ffi</code> library depends on.</p><p>This new enum <code>ClockType</code> is defined in the <code>clock-ffi</code> library as it would be in any other uniffi library, similar to how we&#39;ve done in <a href="./enums.html">3-enums</a>. To use the <code>ClockType</code> in calendar-ffi, we let uniffi-rs know this type is defined in a separate udl file by using the following syntax:</p><div class="language-uniffi-udl"><button title="Copy Code" class="copy"></button><span class="lang">uniffi-udl</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">[External=&quot;clock_ffi&quot;]</span></span>
<span class="line"><span style="color:#A6ACCD;">typedef extern ClockType;</span></span></code></pre></div><p>We can then import the <code>ClockType</code> enum in our Rust code just like we would any other type:</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> clock_ffi</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">ClockType</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>Note that for the bindings file to import the types correctly, it needs to know what namespace this other library uses. By default uniffi assumes this is the name of the library, but you can override this by defining it in the <code>uniffi.toml</code> like so:</p><div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">bindings</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">kotlin</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">external_packages</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Map the crate names from [External={name}] into Kotlin package names</span></span>
<span class="line"><span style="color:#A6ACCD;">clock_ffi </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">org.examples.clock</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div>`,8),o=[n];function i(p,r,c,d,u,y){return s(),a("div",null,o)}const m=e(t,[["render",i]]);export{h as __pageData,m as default};
